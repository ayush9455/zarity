import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';

import '../utils/pref_utils.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  // final _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  final Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  final Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    // if (!_supportedCustomColor.containsKey(_appTheme)) {
    //   throw Exception(
    //       "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    // }
    //return theme from map

    return PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    // if (!_supportedColorScheme.containsKey(_appTheme)) {
    //   throw Exception(
    //       "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    // }
    //return theme from map

    var colorScheme =
        // _supportedColorScheme[_appTheme] ??
        ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      splashColor: colorScheme.primaryContainer,
      bottomNavigationBarTheme: const BottomNavigationBarThemeData(
        backgroundColor: Colors.transparent,
      ),
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.white,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(4.w),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: colorScheme.primary,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(2.w),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      checkboxTheme: const CheckboxThemeData(
          checkColor: MaterialStatePropertyAll(Colors.white)),
      dividerTheme:
          DividerThemeData(thickness: 1, color: Colors.grey.shade300, space: 0),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 18.sp,
          fontFamily: 'Outfit',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.black900,
          fontSize: 14.sp,
          fontFamily: 'Outfit',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.black900,
          fontSize: 12.sp,
          fontFamily: 'Outfit',
          fontWeight: FontWeight.w400,
        ),
        headlineLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 33.sp,
          fontFamily: 'Outfit',
          fontWeight: FontWeight.w700,
        ),
        headlineMedium: TextStyle(
          color: appTheme.black900,
          fontSize: 24.sp,
          fontFamily: 'Outfit',
          fontWeight: FontWeight.w500,
        ),
        headlineSmall: TextStyle(
          color: appTheme.black900,
          fontSize: 18.sp,
          fontFamily: 'Outfit',
          fontWeight: FontWeight.w500,
        ),
        titleLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 24.sp,
          fontFamily: 'Outfit',
          fontWeight: FontWeight.w600,
        ),
        titleMedium: TextStyle(
          color: appTheme.black900,
          fontSize: 20.sp,
          fontFamily: 'Outfit',
          fontWeight: FontWeight.w600,
        ),
        titleSmall: TextStyle(
          color: appTheme.black900,
          fontSize: 18.sp,
          fontFamily: 'Outfit',
          fontWeight: FontWeight.w600,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static const primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0xFFDDE9F7), // Light blue, main theme color
    primaryContainer: Color(
        0xFF3D5284), // Slightly darker blue, used for backgrounds or large UI elements

    // On colors (text colors)
    onPrimary: Color(
        0xFF3D5284), // Dark color, used for text and icons on top of the primary color

    // Background color
    background: Color.fromARGB(255, 201, 224, 250), // Light background color
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  Color get white => Colors.white;
  // Amber
  Color get amber600 => const Color(0XFFDFB201);

  // Black
  Color get black900 => const Color(0XFF000000);

  // BlueGray
  Color get blueGray400 => const Color(0XFF898989);

  // Gray
  Color get gray200 => const Color(0XFFEEEEEE);
  Color get gray400 => const Color(0XFFAEAEAE);
  Color get gray600 => const Color(0XFF747474);
  Color get gray700 => const Color(0XFF676767);

  // LightGreen
  Color get lightGreen800 => const Color(0XFF558C18);

  // Yellow
  Color get yellow600 => const Color(0XFFEAD93C);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
